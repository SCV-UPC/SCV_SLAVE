import Pyro4
import os

from subprocess import check_output
IP=check_output(['hostname', '-I'])

def obtenir_comandes():

	"""
	crea un diccionari a partir del fitxer config, caracteristic de cada Raspberry.
	"""

	d={}

	f=open("/home/pi/SCV-jasper/CONFIGURATION/config.txt",'r')
	lines=f.readlines()
	for el in lines:

		veu,comanda=el.split('*')
		d[veu]=comanda

	return d
	

class multipleMicrophones():
	"""
	Aquesta classe indica si ja s'ha detectat jasper a algun altre lloc o no
	permeten aixi tenir diferents maquines corrent jasper.py sense duplicar-se
	a un mateix instant. Es asincron de moment. Temps de possible conflictivitat
	de menys de 0,01s.
	"""

	def __init__(self):
	
		self.indicadora=1

	def valor_actual(self):

		return self.indicadora

	def modifica(self,numero):
		
		self.indicadora=numero

class comandes():

	"""
	Aquesta classe fa que les comandes al fitxer config siguin accessibles des de tot arreu
	"""

	def __init__(self):

		self.diccionari=obtenir_comandes()

	def diccionari_actual(self):

		return self.diccionari

	def modifica(self,dic):
	
		self.diccionari=dic


class executa():

	def executa(self,comanda):

		os.system(comanda)


multipleMicrophones=multipleMicrophones()
comandes=comandes()
executa=executa()


Pyro4.Daemon.serveSimple({multipleMicrophones:"jasper.multipleMicrophones"},port=5161,host='192.168.1.37',ns=False)
Pyro4.Daemon.serveSimple({comandes:"jasper.comandes"},port=5162,host='192.168.1.37',ns=False)
Pyro4.Daemon.serveSimple({executa:"jasper.executa"},port=5163,host='192.168.1.37',ns=False)



